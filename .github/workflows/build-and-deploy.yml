name: build-and-deploy-html-db

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: self-hosted
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name html-db-eks-cluster --region ${{ secrets.AWS_REGION }}

      - name: Install Docker
        run: |
          # Download and install Docker Desktop
          $url = "https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe"
          $output = "$env:TEMP\DockerDesktopInstaller.exe"
          Invoke-WebRequest -Uri $url -OutFile $output
          Start-Process -FilePath $output -Args "/silent", "/allusers" -Wait
          # Add Docker to system PATH persistently
          $dockerPath = "C:\Program Files\Docker\Docker\resources\bin"
          $currentPath = [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine)
          if ($currentPath -notlike "*$dockerPath*") {
              [Environment]::SetEnvironmentVariable("Path", "$currentPath;$dockerPath", [EnvironmentVariableTarget]::Machine)
              $env:Path = [Environment]::GetEnvironmentVariable("Path", [EnvironmentVariableTarget]::Machine)
          }
          # Wait for Docker service and verify
          Start-Sleep -Seconds 60
          if (!(Get-Service "Docker" -ErrorAction SilentlyContinue)) {
              Start-Service -Name "Docker"
          }
          $maxAttempts = 10
          $attempt = 0
          while ($attempt -lt $maxAttempts) {
              try {
                  docker --version
                  break
              } catch {
                  Start-Sleep -Seconds 10
                  $attempt++
              }
          }
          if ($attempt -ge $maxAttempts) { throw "Docker failed to start" }
        shell: powershell

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Maven
        run: mvn -B package --file pom.xml

      - name: Build and tag Docker image
        run: |
          docker build -t html-db-app .
          docker tag html-db-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/html-db-app:latest

      - name: Push Docker image to ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/html-db-app:latest

      - name: Deploy to EKS
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
